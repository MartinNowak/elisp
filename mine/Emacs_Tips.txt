				 -*- mode: org; -*-
                        -*- coding: mule-utf-8-unix -*-

* Emacs (Lisp) Tips                :Emacs:Lisp:ELisp:Tips:Recommendations:elispelisptructures (make-...)
   - make-vector, make-list, make-bool-vector, get-buffer-create, make-string

** Symbols and Object Arrays (ObArrays)
*** Components of a Symbol
    - *Name*: [[symbol-name]] [[make-symbol]]
    - *Value* (Variable):
    - *Function*: [[defun]]
    - *Property list*: [[symbol-plist]]
*** Create Symbol
    - [[make-symbol]]
*** Print Symbol
    - [[symbol-name]]
*** Set/Get Symbol Properties
    - Get All: [[symbol-plist]]
    - Get One: [[get]]
    - Set One: [[put]]
*** Set/Get/Remove in Obarrays
   - [[intern]], [[intern-soft]], [[unintern]]
*** Iterating of Symbols in Obarrays
   - [[mapatoms]]
*** Other ObArrays Functions in [[file:obarray-fns.el]]
     [[obarrayp]], [[copy-obarray]], [[unintern-symbols-with-prefix]],
      [[find-symbols]], [[symbols-with-property]], [[symbol-properties]]
*** Using Uninterned Symbols
    setq automatically interns a symbol
:   (setq _x 'some)
:   (intern-soft "_x")
:   (put _x :propname 17)
:   (get _x :propname)

** Arrays
   [[aset]], [[aref]]

** Lists (Cons)
   [[car]], [[cdr]], [[setcar]], [[setcdr]], [[nthcdr]], [[sublist]]

** Extract Subsets
   - sublist, substring, subseq

** Text (Symbol) Properties in Strings or Buffers
   Argument object can be either a string, a buffer or nil for current buffer.
   See [[info:Elisp]] node "Text Properties".
*** Examine/Get
    - (get-text-property pos prop &optional object)
    - (get-char-property position prop &optional object)
*** Put/Set/Add/Append/Prepend
    - (put-text-property start end property value &optional object)
    - (add-text-properties start end properties &optional object)
    - (set-text-properties start end properties &optional object)
*** Remove/Delete
    - (remove-text-properties start end props &optional object)
    - (remove-list-of-text-properties start end list-of-properties &optional object)

** Finding and Matching Completions
*** Prefix:
    - [[elisp:(try-completion "" '("/etc/passwd" "/etc/passwd~" "/etc/password"))]]
    - [[elisp:(all-completions "" '("/etc/passwd" "/etc/passwd~" "/etc/password"))]]
*** Partial:

** For Optimal Performance prefer =memq()= over =memql()= and =member()=
   This because [[memq]] uses [[eq]] which is the fastest built-in function of all.

** Icicles
*** Keys: S-SPC, M-*, TAB, S-TAB, C-Up/Down, C-M-.

** Lists
*** Modifying Lists
**** Modifying Structure
     - [[setcar]], [[setcdr]], [[setf]] [[nconc]], [[nreverse]], [[sort]]
**** Add to List
:  (defun add-to-list-several-elements (list-variable elements &optional append compare-fn)
:  (dolist (element elements)
:     (add-to-list list-variable element append compare-fn))
:  (symbol-value list-variable))
**** Union and Intersection of List
   - [[elisp:(union '(a b c) '(c d e))]]
   - [[elisp:(intersection '(a b c) '(c d e))]]

** Remove Dpulicates in Sequence
*** Non-Destructively
   - [[elisp:(remove-duplicates '(a b b c c))]]
*** Destructively (Inline)
   - [[elisp:(delete-duplicates '(a b c))]]

** Skip, Search, Match and Replace
*** Skip
    - Skip Syntax Charcters: skip-syntax-forward, skip-syntax-backward
    - Skip Characters: skip-chars-forward skip-chars-backward
*** Search
    - Move to first Hit: [[re-search-forward]]
    - If Before Hit: [[looking-at]]
    - If After Hit: [[looking-back]]
*** Matches
    - (match-string num &optional string)
    - (match-[beginning|end] subexp)
*** Replace in String
    [[elisp:(replace-in-string "." "\." ".git")]]
    [[elisp:(replace-in-string "." "\\." ".git")]]
    [[elisp:(replace-in-string "." "\\\." ".git")]]
    [[elisp:(replace-in-string "." "\\\\." ".git")]]
    [[elisp:(replace-regexp-in-string "\\." "\." ".git")]]
    [[elisp:(replace-regexp-in-string "\\." "\\\\." ".git")]]

** Emacs Regexps Quick-Sheets
*** Character Classes
   - . any character except newline
   - \w a character within a word
   - \W a character which is not within a word
   - \< the beginning of a word
   - \> the end of a word
   - \b a word boundary
   - \B characters which are not a word boundary
   - ‘\` the beginning of the whole input
   - ‘\' the end of the whole input
*** Contexts
   - ^ beginning of line
   - $ end of line
*** Repetitions
   - * 0 or more
   - + 1 or more
   - ? 0 or 1
   - *? +? ?? non-greedy variants of *, +, ?

** [[http://www.emacswiki.org/cgi-bin/wiki/ElispCookbook][ElispCookbook]]

** [[info:emacs:Regexps][Emacs Regexps Regular Expressions (info)]]

** Iteration and Mapping Related
*** Map
   - [[elisp:(mapcar function sequence)]] (*built-in*)
   - [[elisp:(mapconcat function sequence separator)]] (*built-in*)
   - [[elisp:(maplist function sequence)]] (cl-extra.el)
   - [[elisp:(map type function sequence)]] (cl-extra.el)
*** Iteration
    - (dotimes (var count [result]) body...)
   - (dolist (var list [result]) body...)

** Append and Concatenate
*** append - Puts Sequences Together
    [[elisp:(append '(a b) '(c d))]]
*** nconc - Same as append but modifies first argument
    [[elisp:(let ((dummy '(a b))) (nconc dummy '(c d)))]]
*** concat - Use to create strings

** Accessing Association Lists (ALists)
*** Indexed Get Reference
    - [[assoc]]
*** Indexed Set
    - [[set-alist-slot]]
*** Indexed Delete/Remove
    - [[delassoc-by]]

** Apply and Function Calls
   =funcall()= is slightly easier to use than =apply()=
   [[elisp:(apply '(lambda (x y) `[,x ,y]) '("a" "d"))]]
   [[elisp:(funcall '(lambda (x y) `[,x ,y]) "a" "d")]]

** Using Hash Tables :Hash:Table:Tutorial:
   :(setq dummy (make-hash-table :test 'equal))
   :(puthash "xxxGNU" "--gnu" dummy)
   :(puthash "xxxGPL" "--gpl" dummy)
   :(puthash "xxxLGPL" "--lgpl" dummy)
   :(gethash "GNU" dummy)
   :(hash-table-size dummy)
   :(try-completion "x" dummy)

** Entering Single-Quotes in Emacs Lisp
   Entered in code as: '\'

** Operate on file through a temporary buffer
   (with-temp-buffer (insert-file-contents file-name) (operate-it))

** Efficiency
   Reading the file into a buffer and then working on that buffer is one of the
   most efficient operations in Emacs.  After all, this is the most basic
   operation of any text editor, so it must be heavily optimized.

** Inserting Time Stamps
*** Using org.el:
    (org-insert-time-stamp (current-time) t)
*** Using Emacs default:
    (format-time-string "%Y-%m-%d %H:%M")
** EmacsDefense - Read this first:
http://www.geocities.com/kensanata/wiki/EmacsDefense.html

** Emacs GDB Note :GDB:Debugger:Development:
   We must use the flag --annotate=3 to gdb when calling it from Emacs in order
   for integration with source-file browsing to work entering breakpoints.
   Example:
			 [[shell:gdb --annotate=3 t_avg]]

** Emacs 22 Build Tip
   [[shell:./configure]]
   [[shell:make bootstrap]]
   [[shell:make install]]

** Emacs/W3
   [[shell:./configure --with-emacs]]
   [[shell:make]]
   [[shell:make install]]

** Etags Regexps
   http://www.gnu.org/software/emacs/manual/html_node/Etags-Regexps.html
   Includes examples For Octave, Tcl and VDHL files.

** Saving a file with a special coding system.
   Call [[set-buffer-file-coding-system]] with argument with iso-latin-1-dos to
   get DOS/Windows style newline characters.

** Undo History
   Upon exist Save Undo History in all buffers having files.
   Together with an MD5-checksum we can also guarantee that the file has not
   changed since last time. If it has we need to forget this history.

** Apropos Regular Expressions
   You can use regular expressions to search help. If you want to learn how to
   stop duplicated commands in Emacs shell history, you would say, "Search for
   shell OR comint, followed by dup" or, in Emacs speak:
	       [[shell:M-x apropos RET \(shell\|comint\).*dup RET ]]

** Permissions: Su For Higher Authority
   You can use tramp.el, or possibly Ange-ftp (Emacs) or EFS (XEmacs) to edit
   files with another user's permissions. This may require the FTP service to
   be running. Simply open a file using this syntax:

   C-x f
   /su:root@localhost:/etc/hosts
   or, more simply,
   /su::/etc/hosts
   You can also try this older syntax:
   C-x f
   /root@localhost:/dir/filename
   Or, for XEmacs: C-x f
   /[su/root@localhost]/dir/filename

** Search String Editing
   You can edit the search string, in the middle of performing an isearch, by
   typing C-^.
   You can even paste, using C-y.
   When you're ready to carry on searching, just type C-s (or C-r ) again.

** TrueType Fonts
   From: Peter Baumgartner

   Enable TrueType Fonts under XWindow by running the xfstt font server. Extend
   the font path by

   [[shell:xset fp+ inet/127.0.0.1:7101]]
   This line typically goes into ~/.xinitrc. Port number 7101 is the default.

   Now you can use X-font specifications for ttf-fonts in the usual way. For
   instance, in ~/.Xresources, set the default XEmacs fonts with

   XEmacs.default.attributeFont: -ttf-verdana-medium-r-normal-*-17-*-75-75-*-*-iso8859-1

** Unicode
   From Jasper Harder
   This is an X Window (only) technique to check if a particular Unicode glyph is supported. You can determine which font Emacs will use with
   internal-char-font
   You could then call
   [[shell:xlsfonts -lll -fn FONT]]
   and parse the output to get the font metrics. If the metrics for a particular code point contains all zeros, say
   0x009f (159) 0 0 0 0 0 0x0000
   then the glyph doesn't exist in this font.

** Linemark Compile - Highlight compiler hits
   Emacs has always been good about compiling code and going to the errors that
   are found. The Linemark Compile script uses the linemark.el tool to go one
   step further by automatically highlighting all lines in all source buffers
   that the compiler has identified as being problematic.

   To use this tool, first download the most recent cedet tool which includes
   EIEIO. Next, after a compilation has completed, use the command:

   M-x lmcompile-do-highlight

   to turn highlighting on for all found errors.

   You can also add the above command to compilation-finish-functions to have
   it occur automatically.

   Once you are done with the feature, you can disable the highlighting with
   the command:

   M-x lmcompile-clear

** Emacs Tip
   Construct a unique-recursive-query-replace-regexp and bind it to Ctrl-r.

** Emacs Tags Tip
   Investigate tags-query-replace.

** Emacs Tip
   The package dabbrev-hover seems to be a cool thing. Currently in a
   development state. I do not feel that it is yet mature so I disable it.

** Emacs Tip
   Added the functions calculator-sum-row and calculator-product-row in my
   .emacs that practically adds or multiplies all numbers contained in the
   current selection.

** Really cool Emacs Tip
   Use hippie-expand instead. Binding it to Ctrl-tab as usual. Completes real
   paths, lists (function call arguments), lines, kill-ring, source-code etc.

** Emacs Tip
   Meta-Space runs the just-one-space similar to fixup-whitespace but always
   places one space.

** Emacs Tip
   Use C-h C-k (in analogy with C-h k) followed key combination to get a more
   descriptive context-based Info documentation for it.

** Emacs Tip
   Added the function [[search-list]] to my .emacs. May provide the things we
   need for performing cool recursive file processing.

** Emacs Tip
   I went to www.gnu.org downloaded the NEWS file for the next release under
   the list item <Development & "Coming Soon"> under the "Releases".

   The NEWS file is written in outline-mode format.

   When GNU Emacs 21.4 arrives investigate
   - the new package flymake.el. It does on-the-fly syntax checking of program source files. See the Flymake's Info manual for more details.
   - the library tree-widget.el
   - the URL package.
   - the new kmacro package.
   - the new package table.el that implements editable, WYSIWIG, embedded 'text 'tables' in Emacs buffers.

** ASCII Table
   In Emacs run M-x list-ascii-table to generate a buffer containing a list of ASCII codes.

** DONE Emacs Tip
   Use doxymacs an Emacs minor-mode for editing doxygen tags.

** DONE Emacs Note
   Changed comment face to "salmon".

** Emacs Tip
   Use the expression such as the following to insert newlines after all
   occurrencies of static __inline__ in C/C++ files beginning in this
   directory.

   (findr-query-replace "^static __inline__ "
		     "static __inline__\n"
		     "\.[ch]pp$"
		     ".")

   Also see my hand-written function for replacing C/C++ identifiers
   [[rename-c-ident-recursively]] located in ~/.emacs.

** Etags Tip
   Add my ~/.emacs and ~/pnw/emacs/*.el to the TAGS file. Had to guide it a bit
   by prefixing the file arguments with the switch --language=lisp to make it
   work. See the Etags Info for good explanations.

** Navigating Structure
   - *Symbols*
     - [[elisp:(beginning-of-symbol-.*)]]
     - [[elisp:(end-of-symbol-.*)]]
   - *SExp*
     - [[elisp:(forward-sexp)]]
     - [[elisp:(backward-sexp)]]
     - [[elisp:(beginning-of-sexp)]]
     - [[elisp:(end-of-sexp)]]
   - *Statments*
     - [[elisp:(c-beginning-of-statement)]]
   - *Functions*
     - [[elisp:(c-beginning-of-defun)]]
     - [[elisp:(c-end-of-defun)]]
   - *Arguments* 
     See [[file:cc-funarg.el]]

** Emacs Tip - Opening of a TCP connection for a service to a host
   (open-network-stream name buffer host service)

** Emacs CEDET
   Checkout CEDET (Collection of Emacs Development Environment Tools) at
   cedet.sourceforge.net. Seems to contain a really cool completion mechanism
   via Semantic: "Infrastructure for parser based text analysis in Emacs".
   Added it to Gentoo using
   [[shell:emerge cedet]]
   Excluded semantic.cache in call to tar in backup_pnw.sh.
   The info-documentation is very descriptive and the best way to learn about
   all the tools contained in CEDET.

** Semantic
*** Senator Keys
    - C-c , C-w (kill-tag)
    - C-c , M-w (copy-tag)
    - C-c , C-y (yank-tag)

** Emacs for MacOS X
   The site http://webweavertech.com/ovidiu/emacs.html contains prebuilt Emacs
   versions for Jaguar and Panther. Also contains Redo mechanism with the file
   redo.el.

** Emacs Tip
   Tested file:undo-browse.el but it was buggy and not very usable.

** Emacs Tip
   Added support for generic-mode by adding (require 'generic-x) to my .emacs.

** Emacs Tip
   Better macro handling in the packages kmacro on my Mac OS X Emacs 21.3.50.1
   enables us to cycle through old macros using the kmacro-cycle-ring-previous
   and kmacro-cycle-ring-next.

** Language Coding
   Char    OS X    Linux
   å	214
   ä       212
   ö       232
   Ã…
   Ã„
   Ã–       205

** LanguageEnvironment
   The "language environment" determines coding system priority and the default
   input method and sometimes other things. (See InputMethods.)

   Emacs will set up the correct language environment, if your LANG environment
   variable is set correctly. Try one of the following to see its value:

    echo $LANG
    printenv LANG
    locale

    If it is set correctly, you don't need to do anything else. If LANG
    contains "iso-8859-1", for example, then the Latin-1 language environment
    will be set automatically.

*** Setting it Explicitly
    Perhaps you need to set it explicitly in a startup script. This one here
    sets the language to German (de), the country to Switzerland (CH), and the
    coding system to Latin 1 (ISO 8859-1):

    setenv LANG de_CH.ISO_8859-1

    The following enables Latin 1 Umlauts but keeps US English as the language
    (which results in English error messages from file tools etc.):

    setenv LANG en_US.ISO_8859-1

*** On a TTY
    On a tty, things are different. Emacs can't be sure that the tty is 8bit
    clean or uses the 8th bit as the `meta' bit. This is why you still need to
    call `set-keyboard-coding-system' if you want to enter accented chars
    directly on a tty:

    (set-keyboard-coding-system 'latin-1)

    A note on input methods: An input method (as supplied in the separate LEIM
    package in Emacs 21 and below) allows people without the right keyboard to
    enter the characters. This allows people with American keyboards to enter
    German umlauts, for example. A person with a German keyboard, however,
    would usually not need an input method: The keyboard (and the correct setup
    of his system) take care of German umlauts.

    If your display is not working correctly, or your LANG is set to C or not
    set at all (and you don't want to change it), then you might have to call
    `set-terminal-coding-system':

   (set-terminal-coding-system 'latin-1)

   See InternationalConsoleFonts for some more info.

   Working around a broken LANG

   If your LANG is not set up correctly, and you don't want to fix it, you can
   do the setup in your ~/.emacs file:

   (set-language-environment "Latin-1")

In order to list all language environments, call `set-language-environment' and use <tab> to see all completions.

** hideshow.el

** icicles.el - minibuffer input completion and cycling of completion candidates.

** Emacs Code (including Macros) Folding
*** hs-minor-mode
ROCKAR!
*** outline-minor-mode
Suger fett i c-mode.
*** folding.el
http://www.chrislott.org/geek/emacs/n2n_folding_mode.php
Suger också eftersom den slänger in folding-kommentarer i koden.
*** M-x hide-ifdef-mode
Hide-ifdef minor mode hides selected code within `#if' and `#ifdef' preprocessor blocks. See the documentation string of hide-ifdef-mode for more information.

** Emacs thingatpt and Automatic Argument Suggestion
   The files thingatpt.el and thingatpt+.el provides functions that determine
   various patterns closest to current cursor position in buffer. None of them
   are interactive and should be used in interactive functions that
   automatically suggest arguments based on closest matching patterns in
   buffer.

** Agrep from Emacs
   agrep cannot be called recursively. The following command performs a case
   insensitive (-i) grep on the expression goldenratio allowing 3 errors (-S 3)
   showing line number (-n) and cost (-s) of each match.
	 [[shell:agrep -i -B -S 3 -n -s goldenratio *.[ch] */*.[ch]]]

** Emacs Tip
   Use Woman (M-x woman) to browse UN*X man pages without external Man
   program. Changed binding of C-m to woman. Added VxWorks manual paths to end
   of MANPATH on diana. Now there is no need to use both man and tman.

** Emacs Tip
   Use cwarn-mode or global-cwarn-mode to activate a minor-modes for C and C++
   that warns the programmer by highlight potential bug.

** Emacs Tip
   Use eshell.el in Emacs.
   [[shell:M-x eshell]]

** Emacs Tip
   Use net-utils.el in Emacs. Provides ping, traceroute, netstat, nslookup,
   arp, route.
   [[shell:M-x ping]]
   [[shell:M-x traceroute]]

** Emacs Tip
   Lookup in the file net-utils.el for an excellent simple example of how to
   program your own major mode with font-locking, specifically in
   nslookup-font-lock-keywords.

** Emacs Tip
Installed iimage.el which displays images in buffers.

** Emacs Tip
Finally got pmdb-mode.el to work. Look in emacs/pmdb-mode.el for details.

** Emacs Tip
Downloaded "An Emacs language mode creation tutorial" to Documentsemacs-mode-tutorial.html.

** Subversion Interface
Use psvn.el as the Emacs interface to subversion.

** Emacs Tip
Use [[renumber-paragraph]] and [[renumber-list]] in .emacs to fix damaged text-formatted enumerations.

** Emacs Tip
Make use of (executable-find COMMAND) .emacs.

** Emacs Tip
Remember to put desktop.el initializations last in .emacs.

** Emacs W3
Installed w3-4.0pre.47 the Emacs World Wide Web browser. See the info
documentation for more.

** Emacs Tips
- Use cdi.el and oggel.el to encode OGG directly from CDs.
- Use portage.el to search and install Gentoo packages.
- Use mic-paren.el to get more advanced highlighting of matching parentheses.

** Xrefactory
Use "Xrefactory" as a code refactoring tool in Emacs.

** Emacs OS X Note
Added OSTYPE=darwin7.0 to Fink Environment Preferences in order to make the default font to change automatically.

** Emacs Tip
Soft word wrap.

** Emacs Mac OS X Tip
Found a way to determine whether we are running OS X or not in Emacs: (string-match "Darwin" (shell-command-to-string "uname"))

** Line Highlightning
Activated hl-line-mode.

** Problem Fix
Deactivated igrep- (igrep-.elc) because it stopped next-error and previous-error from working.

** (FTP?) Copy Tip
Copying a file from a directory to a given directory at a remote host is completely transparent when using Emacs Dired-mode. Simply move cursor to the file you want to copy, mark it (m), copy it (C) and give the destination URL to the remote host in the format
		       /user@enhet1:path
Omitting path defaults to home. The colon MUST however be present to tell Emacs that we are accessing a remote host.

** Mode Fix
Commented away the lines 2419 to 2422 from emacs/html-helper-mode_3.0.4kilo/html-helper-mode.el that disturbs C-mode recompiled and reinstalled to make my C-mode bindings works again.

** imenu
Activate imenu-minor mode by defining the variable imenu-generic-expression in the mode setup and activate it by running the function imenu-add-menubar-index. Look in generic-x.el for details.

** Tip
Additional packages for GNU Emacs can be found at
ftp://ftp.sunet.se/pub/gnu/emacs-lisp/

** Tip
   Use my function [[pnw-print]] to print documents as two columns landscapes.

** Compile Plus
   Renamed compile-plus.el to compile+.el and then added (require 'compile+) to .emacs.

** ELSE
   Emacs Language Sensitive Editor (ELSE) Installation
   - Add (require 'else-mode) to .emacs.
   - Install the help files else.info* at $(INFODIR) and add the line
		      * ELSE: (else.info).	 Else mode.
                        to $(INFODIR)/dir.

** Note
   Tried to set the variable c-doc-comment-style to javadoc to enable Javadoc
   (doxygen) font-locking of comments in C mode. Got no affect however. What
   did I do wrong?

** ido.el
   Tested ido.el but I DO NOT like the interface so I disabled it.

** Unicode
   The MUltiLingual Environment mule.el should enable Unicode in Emacs.

** Note
   Use C-h C-k to get detailed documentation of a key in its <emph>context</emph>.

** Info Tip
   Read an info-file from the filesystem from Emacs by typing C-u C-h i <file.info>.

** SuperTip
   For mode-sensitive coloring see the note at beginning of the file
   ~/pnw/emacs/diff-mode-.els. The variable that controls this is named
   'special-display-buffer-names.

** Alt and Apple Buttons
   Add (setq mac-command-key-is-meta nil) to .emacs to prevent Emacs from making the Apple key the Meta-modifier.

** Function Renaming
   Renamed c-rename-ident c-findr-query-rename-ident to rename-c-ident and
   rename-c-ident-recursively cause these functions can be used in any Emacs
   mode.

** Build Note
   Tried to force Emacs build with GCC optimization level 3 (-O3) by adding the
   line [[shell:export CFLAGS=${CFLAGS} LDFLAGS=-s]] prior to the configure
   call. But the installation fails so I remove it and rebuild.

** Emacs Macro Saving and Retrieving
   - Define macro with 'start-kbd-macro and 'end-kbd-macro.
   - Use 'name-last-kbd-macro to name it.
   - Open the file where you want to save your macro and call 'insert-kbd-macro.
   - We often know what we want to search for in macros so C-s M-e to edit the
     search string before doing any search. This limits the risk having the
     macro quitted because of a missing search.

** Search Case Sensitivity
   Type M-c inside an interactive search or replace to toggle case sensitivity
   on and off.

** Emacs Batch Bytecompile Note
   [[shell:emacs -batch -q -f batch-byte-compile <file> [<file>...]]]

** GUD Breakpoints
   Use the command gud-tbreak to toggle breakpoints in C code.

** Emacs Tip
   See hier-imenu.el for a hierarchical imenu-mode.

** Emacs Calculators
   - Added calculator.el and bound it to C-c u.
   - See Emacs package calc for a HP-28/48 styled Calculator.

** Emacs Tip - Su For Higher Authority
   You can use tramp.el, or possibly Ange-ftp (Emacs) or EFS (XEmacs) to edit
   files with another user's permissions. This may require the FTP service to
   be running.
   - Simply open a file using this syntax:
     C-x f /su:root@localhost:/etc/hosts or, more simply, /su::/etc/hosts
   - You can also try this older syntax: C-x f /root@localhost:/dir/filename
   - Or, for XEmacs: C-x f /[su/root@localhost]/dir/filename

** Emacs Tip - Remote Printing
   Windows users can simply give a UNC name to their printer,
   e.g. \\remote\hp6. Windows users might also wish to use "print", when EMacro
   prompts the first time for the print command. This is saved in
   preferences.el as (setq lpr-command "print")

   If your Linux system administrator hasn't set up /dev/rp0, you might be able
   to EMacro's first time prompt with something like
   [[shell:rsh server lp -d hp-printer]]

   This is saved in preferences.el as
   [[elisp:(setq lpr-command "ssh")]]
   [[elisp:(setq lpr-switches '("print_server" "lp" "-d" "printer_name"))]]

** Emacs Tip
   For more tips see ~/pnw/Documents/emacs-wizard-tips.html

** re-builder.el - Building Regexps with visual feedback
   Use it to develop regular expressions in Emacs.

** auto-capitalize.el- Automatically capitalize (or upcase) words.
   (require 'auto-capitalize)

** highlight-completion.el - completion with highlighted provisional text
   (require 'highlight-completion)

** Killing Buffers
   In Buffer Menu mode (buff-menu.el) sets of buffers can be marked and operated on.

   You can select and remove several buffers with C-x C-b to show list, then
   cursor to each, and type "d" to delete. Hit "x" to exit.

   You can lock a buffer, so that it cannot be killed, by (require 'emacs-lock)
   ;;add to e-postload.el (or .emacs) M-x toggle-emacs-lock

** Multiple Major Mode
   The "Multiple Major Mode" (mmm-mode.el) allows multiple Emacs modes to exist
   in the same buffer. It seems to be in an alpha state however so I don't
   bother installing it yet.

** hi-lock.el
   Use hi-lock.el when testing regexps, specifically [[highlight-regexp]].

** iswitchb
   iswitchb together with iswitchb-highlight really improves Emacs usability!

** gprof
   Added Interface to gprof through [[gprof]] or C-c p.

** Show/Focs definitions
   To view the current definition do M-x reposition-window (C-M-l).

** artist.el
   Use artist.el to draw ASCII graphics with your mouse.

** C-c C-e
   Run the C preprocessor on the text in the region, and show the result, which includes the expansion of all the macro calls (c-macro-expand). The buffer text before the region is also included in preprocessing, for the sake of macros defined there, but the output from this part isn't shown.

** M-x cpp-highlight-buffer
   Highlight parts of the text according to its preprocessor conditionals. This command displays another buffer named `*CPP Edit*', which serves as a graphic menu for selecting how to display particular kinds of conditionals and their contents. After changing various settings, click on `[A]pply these settings' (or go to that buffer and type a) to rehighlight the C mode buffer accordingly.

** C-c C-s
   Display the syntactic information about the current source line (c-show-syntactic-information). This is the information that directs how the line is indented.

** M-x cwarn-mode

** M-x global-cwarn-mode
   CWarn minor mode highlights certain suspicious C and C++ constructions:
   - Assignments inside expressions.
   - Semicolon following immediately after `if', `for', and `while' (except
     after a `do ... while' statement);
   - C++ functions with reference parameters.  You can enable the mode for one
     buffer with the command M-x cwarn-mode, or for all suitable buffers with
     the command M-x global-cwarn-mode or by customizing the variable
     global-cwarn-mode. You must also enable Font Lock mode to make it work.

** M-x ff-find-related-file
   Find a file "related" in a special way to the file visited by the current
   buffer. Typically this will be the header file corresponding to a C/C++
   source file, or vice versa. The variable ff-related-file-alist specifies how
   to compute related file names.

** Emacs GDB Valgrind
*** My Use - Works FINE for me!
    Just type M-x compile and enter "valgrind PROG" instead of "gdb PROG".
*** My Verbose Use
For more verbose output use
[[shell:valgrind --leak-check=yes --show-reachable=yes PROG]]
*** More Advanced Use
In the ~/.gdbinit Emacs versions > 21.3.50 support Valgrind, by adding the line
				   set ann 1
Now, in Emacs, when you enter
				    M-x gdb
Replace the default invocation of
Run gdb (like this):
				 $ gdb -fullname
with
		      $ valgrind --db-attach=yes ~/myprog
At a memory violation, when valgrind asks if you want to atach to gdb, type
				       y
==19752== ---- Attach to GDB ? --- [Return/N/n/Y/y/C/c] ---- y

The source does not immediately appear but if you type
				      bt
GDB prints the call stack. This also includes calls to valgrind's code. Identify the frame number of your code, 6 say, and type:
[[shell:(gdb) frame 6]]
and your code should appear. Just as with the command line you can't step through your code under valgrind but you can move up and down the stack and examine the values of variables. When you want to return to valgrind type
[[shell:Ctrl-D]]
to quit GDB but stay in the GUD buffer.
		    Thanks to http://www.nick.uklinux.net/

** Valgrind in Emacs
Added the function [[valgrind-run]] that runs a program through Valgrind and directs its output to a compilation buffer.

** ElispArea: http://www.emacswiki.org/elisp/index.html

** Emacs Histories
See the calls of read-from-minibuffer in compile.el for details on how to use histories in minibuffer user interaction.

** Handling Obseleted add-ons when Emacs is evolving
For example look at line 243 in replace+.el. This indicates that this Lisp package will become obselete and should be skipped in Emacs versions higher than 22.

** org.el: a plain-text spreadsheet for emacs

** Aquamacs is an easy-to-use, Mac-style Emacs for OS X.
http://aquamacs.org/download.shtml

*** Aquamacs Included Packages
    - redo.el from XEmacs (Kyle E. Jones) Undo/Redo
    - files+/frame+/autofit-frame etc. (Drew Adams) comfortable frame movements etc.
    - par-align (Bob Weiner) - included but not activated
    - osx-defaults (David Reitter) central settings for OS X
    - transparency2 (Ryo Yoshitake, Takashi Hiromatsu, Seiji Zenitani) Allow transparent frames
    - smart-frame-positioning (David Reitter) intelligently place new frames on the screen
    - aquamacs-mac-fontsets (David Reitter) Nice fonts
    - one-buffer-one-frame-mode (David Reitter) optionally display buffers in separate frames
    - check-for-updates (David Reitter)
    - mac-print (David Reitter) Print with Preview, Export to PDF
    - aquamacs-menu (David Reitter) Mac standard menu bar
    - emulate-mac-*-keyboard-mode (David Reitter)
    - aquamacs-mule (Mahn-Soo Choi) Asian Input Configuration
    - utf-8m (Seiji Zenitani) Asian filenames
    - fixed-width-fontset (T. Hiromatsu) - inactive by default
    - osx-key-mode (David Reitter) OS X keyboard shortcuts
    - color-theme (Jonadab, Xavier Maillard) Color sets for frames
    - htmlize (Hrvoje Niksic) Export to HTML
    - pager (Mikael Sjödin, David Reitter)
    - Smart-Drag-N-Drop (Seiji Zenitani)
    - applescript-mode (FUJIMOTO Hisakuni, Harley Gorrell)
    - AUCTeX (David Kastrup et al.) LaTeX editing environment
    - css-mode (Lawrence Mitchell, Alex Schröder)
    - ESS (Emacs Speaks Statistics - for R, S and others)
    - findr (David Bakhash) Breadth-first file-finding facility for (X)Emacs
    - html-helper-mode (Gian Uberto Lauri, Nelson Minar) Great HTML editing mode.
    - javascript-mode (Peter Kruse)
    - matlab-mode (Matt Wette, Eric M. Ludlam)
    - nXML-mode (from 0.9.7) (James Clark et al.)
    - php-mode (Turadg Aleahmad)
    - ruby-mode
    - ssh (Noah Friedman)
    - and some more.

      Aquamacs additionally activates a number of packages that are provided
      with the default emacs, such as cua-base, ibuffer, recentf. The GNU Emacs
      code-base is patched. Please see the CVS for the collection of patches
      and additional source-files.

** Emacs man Coloring
   Colored Man-mode face-variables 'Man-overstrike-face and Man-underline-face
   using a call to [[custom-set-variables]] from my .emacs.

** GNU GLOBAL Emacs Interface
   See http://www.gnu.org/software/global/globaldoc.html#SEC39
   All functions take POSIX regular expression as arguments.
   - Go to definition of tag: gtags-find-tag
   - See all references to a tag: gtags-find-rtag
   - If current token is a definition find its references otherwise find its
     definition: gtags-find-tag-from-here. KIND OF LIKE BROWSING AROUND.
   - Go to any symbols which are not defined in `GTAGS': gtags-find-symbol
   - Go to any strings other than symbols: gtags-find-with-grep

** Escape Sequence
   Escape character has value 0x1b.

** Compilation Warning Column
   Emacs already has support parsing both compilation lines and columns.
   See compile.el for details.

** Building Emacs on Mac OS X
   [[shell:./configure --with-carbon --without-x]]
   [[shell:make]]
   [[shell:make install]]

** imdb.el
   imdb.el is an excellent example illustrating network programming in Emacs.

** Pardef-Mode
   Created an Emacs mode for SP pardef files (*.SA) in the file pardef-mode.el.

** Emacs UTF-8
   The standard way to force the utf-8 encoding is:
   C-x RET f utf-8
   To make sure that a file formerly stored as utf-8 is interpreted correctly, you
   may have to type:
   C-x RET c utf-8
   before opening the file.

** Configuration Copying
   [[shell:cp -fr cc-mode-5.30.8 .emacs* ~/sphome]]

** Emacs df-mode installed
   Minor mode to show space left on devices in the mode line is named
   df-mode.el. Put it ~/pnw/emacs/df-mode.el and byte-compiled it to
   ~/.emacs.d/df-mode.elc. The minor mode can be toggled with M-x df-mode.

** Emacs mcomplete installed
   Minibuffer completion with prefix and substring matching.
   See ~/pnw/emacs/mcomplete.el for details.
   - Switching between substring and prefix completion are done with C-p and C-n.
   - Searching through matches are done with C-s and C-r.
   -`RET' in the minibuffer picks the first candidate displayed.
   - When you want to give the exact string you entered, use `M-RET'
   - `C-c' in the minibuffer toggles case significance in completion.

** Emacs igrep download
   An improved interface to `grep` and `find`.

** Emacs Note
   Customized Emacs a bit more.
   - Changed "Font Lock Function Name Face" Attribute "Height" from 1.1 to
     1.0. Makes it all more readable.
   - I didn't like the ebrowse class color against the dark background. I found
     out that I can changed it under standard customizations Menu "Options" =>
     "Customize Emacs".

** Emacs Lisp Tip
   The function [[regexp-opt]] performs a neat trick. It converts a list of
   strings to a corresponding regular expression. Can this be used in For
   example we could do (regexp-opt '("ole" "dole" "doff")).

** Emacs
   Search for "buffer-local variables" if we want to change the colors of for
   specific type of buffer, such as all buffers containing C/C++ code.

** News Tip
   The newsgroup gnu.emacs.sources looks like a really useful information
   source.

** Emacs find-dired Tip
   Run 'find' and go into Dired mode on a buffer of the output.
   The command run (after changing into DIR) is
   [[shell:find . \( ARGS \) -ls]]
   except that the variable 'find-ls-option' specifcies what to use as the final argument.

** Use info inside of Emacs instead:
   M-x info

** Emacs enriched-mode
   An nice alternative to outline-mode is enriched-mode. An example file can be
   found at /usr/share/emacs/21.3/etc/enriched.doc.

** Emacs Abbrev and Fill
   Use abbrev-mode for automatic expansion of abbreviations and auto-fill-mode
   for automatic line breakings. Activated auto-fill-mode in outline-mode.

** Emacs session.el
   Installed session.elc in ~/.emacs.d. It saves all the histories in Emacs. It
   rocks!

** Emacs FTP support.
   Emacs has built in ftp support when opening files. For example to access
   diana's FTP-server just do C-x C-f /diana:

** Installed cc-mode 5.30
   By downloading, bytecompiling through
   [[shell:\emacs -batch -no-site-file -q -f batch-byte-compile cc-*.el]]
   and finally by installing it in ~/pnw/emacs/cc-mode-5.30.8

   Contains improved C/C++ syntax analysis making my extra font locking symbols
   unnecessary.

** Emacs on the Internet
   Realized that one could easily create really nice automated Internet
   information suckers by reading webpages with wget and, analyzing the data
   using some script and finally representing it in my ZUI.

** Use Imenu in Emacs!.

** Tried making the Emacs functions available in the Emacs menubar. The
   variables menu-bar-file-menu, menu-bar-options-menu, etc contain the
   information...

** Found the Emacs package Ebrowse which is a C++ class browser for Emacs.
   See info pages in emacs for more details.

** Created some Emacs-Lisp functions for making C/C++ development in Emacs
   easier. The functions are currently stored in my .emacs.

** Saving frame states in Emacs
   Added the line (make-frame frame-initial-geometry-arguments) to my .emacs to
   make one extra frame appear in Emacs automatically at startup. Further
   documentaion can be found in frame.el.

** Emacs Lisp Coding
   The Emacs sources is a need-to-have when hacking Emacs Lisp because they are
   perfect learning examples of how everything works.

** Emacs Spell Checking
   Investigated spell checking in Emacs. M-x flyspell-mode in Emacs is
   slick. First to flyspell-mode and then flyspell-buffer. Alternatively choose
   flyspell-prog-mode.

** Emacs ispell
   Support for swedish in ispell is under way. Hittade dock ett Mandrake paket ispell-sv som jag laddade ner och installerade. Verkar vara bla lysiter som är engagerade den svenska varianten.

** Emacs Editing
   Made a search and replace on every to add extra space in all "...i=0; i<..." statements and similar.

** Saving CJK as Unicode

Some CJK (Chinese, Japanese, Korean) characters have been "unified" in the
Unicode standard. What does that mean? The Unicode FAQ by Markus Kuhn [1] says:

ISO 10646 defines formally a 31-bit character set. The most commonly used
characters, including all those found in older encoding standards, have been
placed in one of the first 65534 positions (0x0000 to 0xFFFD). This 16-bit
subset of UCS is called the Basic Multilingual Plane (BMP) or Plane 0.

The problem is that some compilations of Chinese characters alone can already
take 50000 positions. This would not leave enough space for all the other
characters, so Unicode unified characters that have the same meaning and shape
but vary in detail. The Han Unification in Unicode article by Otfried Cheong
[2] uses the following two characters as an example to illustrate what kinds of
characters have been unified, eventhough this particular pair has not been
unified:

    Another example of a character element that appears in two variants is the
    "black" radical. It can be written either in its traditional form as U+9ed1
    (with two little dots), or in its simplified form as U+9ed2 (where the two
    dots have been replaced by a single stroke): ? ?

footnote: In Fact, the radical on the left is simplified form. Simplified
Chinese Character are not always simpler than other variants,it's more of a
unified standard form! Anyway, there are indeed a lot of variants which cause
communication difficulty in some extend in Chinese world. Ã‚Â– A reader from
Beijing

For some users, this unification was not acceptable, however. Otfried Cheon
says:

    I believe the JIS standard actually prescribes the shapes of the glyphs for
    each character, and this is perhaps exactly the grief that Japanese have
    with Unicode. If you are used to think about a codepoint being associated
    with a well-defined shape, the lose view that Unicode takes seems rather
    careless.

Emacs 21 can read JIS (Japanese) encoded files, but in order to save such a
file as UTF-8, you need a mapping from the JIS codepoints to the corresponding
Unicode codepoints. You can do this using `utf-translate-cjk-modeÃ‚Â’ in Emacs
CVS. In your ~/.emacs:

    (utf-translate-cjk-mode 1)

Now you should be able to save the Japanese, Chinese, and Korean part of the
etc/HELLO file using UTF-8. To test it, copy a few CJK characters from the
etc/HELLO file and save them in a UTF-8 file using `C-x C-m c utf-8 RET C-x C-s
filename RET'.

** Pasting
   If you have trouble pasting from other applications: Emacs by default
   requests a selection of type COMPOUND_TEXT. It seems that xterm (and other
   applications) ignore this sometimes and reply using UTF-8 encoded text.

   Here's how to tell Emacs to request UTF-8 first:

   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

** Displaying ANSI Colors Escape Sequences in a Text Buffer
   I have been looking for a way to display shell ansi colors in a text buffer.
   There are a couple of couple of packages that apply ansi colors to emacs'
   shell mode, however I have found nothing that would interpret escape
   sequences in a text buffer.

   We generate log files that contain colors  and highlighting for easy debug
   of problems. The escape sequences displayed in emacs make the file
   unreadable. Does anybody know of a way to do this?

   I have tried: ansi-display.el  glyph-highlight.el ansi-color.el

   Thanks Adam.

** Incremental Search isearch
   http://www.emacsblog.org/2007/03/26/newbie-tip-isearch-word-yank/
   Checkout =isearch-mode-map= for more tips about isearch.

** Ignore case when completion file names
`read-file-name-completion-ignore-case'

** Emacs LISP Sequences
   The following diagram shows the relationship between these types:

   The elements of vectors and lists may be any Lisp objects.
   The elements of strings are all characters.

          ____________________________________
         |                                    |
         |              Sequence              |
         |  ______   _______________________  |
         | |      | |                       | |
         | | List | |         Array         | |
         | |      | |  ________   ________  | |
         | |______| | |        | |        | | |
         |          | | Vector | | String | | |
         |          | |________| |________| | |
         |          |_______________________| |
         |____________________________________|

** Download and URL similar to wget: url-retrieve-synchronously()

** maxframe.el
   Provides the ability to maximize the emacs frame and stay within the display
   resolution.
   - Package: http://files.emacsblog.org/ryan/elisp/maxframe.el
   - Writeup: http://www.emacsblog.org/2007/02/22/maximize-on-startup-part-2/

** CVS Conflicts Tip
   After a CVS merge with a command like [[shell:cvs update -kk -j HEAD]], files
   with conflicts have regions like this:
:> <<<<<<< file.cpp
:>    local version
:> =======
:>    newer version
:>>>>>>>> file.cpp (cvs-version)
:
:> Is there a way in Emacs to automatically select one of these regions
:> and to remove the other?
:
:M-x vc-resolve-conflicts
:
:--
:Johan Bockgård

** RE-Builder Keyboard Shortcuts :Regular:Expression:RegExp:Generation:Building:Key:Shortcuts
   (define-key reb-mode-map "\C-c\C-c" 'reb-toggle-case)
   (define-key reb-mode-map "\C-c\C-q" 'reb-quit)
   (define-key reb-mode-map "\C-c\C-w" 'reb-copy)
   (define-key reb-mode-map "\C-c\C-s" 'reb-next-match)
   (define-key reb-mode-map "\C-c\C-r" 'reb-prev-match)
   (define-key reb-mode-map "\C-c\C-i" 'reb-change-syntax)
   (define-key reb-mode-map "\C-c\C-e" 'reb-enter-subexp-mode)
   (define-key reb-mode-map "\C-c\C-u" 'reb-force-update))

** Path File Name Operations :Path:File:Name:Operations:Relative:Strip:Extension:Concatenation:Appending:Sub:
*** Absolute path: [[elisp:(file-truename "~/.emacs")]]
*** Strip Extension: [[elisp:(file-name-sans-extension "~/.emacs.d")]]
*** Extract Extension: [[elisp:(file-name-extension "~/.emacs.d")]]
*** Extract Containing Parenting Directory: [[elisp:(file-name-directory "/etc/passwd")]]
*** Filename in Directory form (ending with slash): [[elisp:(file-name-as-directory "/etc/passwd")]]
*** Filename in Local Path form: [[elisp:(file-name-nondirectory "/etc/passwd")]]
*** Relative paths: [[elisp:(file-relative-name "/etc/passwd" "/var")]]
*** Concatenation of paths (into sub-paths): [[elisp:(expand-file-name "passwd" "/etc")]]

** Communicating with Processes from Emacs
   Use [[start-process]] and save the handle it returns.
   Alternatively use [[start-process-shell-command]]
   Use [[shell-command]] to get output to a specific buffer.
   Use [[shell-command-in-bg]] to get output to a specific buffer.

** [[http://www.newartisans.com/blog_files/org.mode.day.planner.php][Using org-mode as a Day Planner]] :Planning:Organization:Calendar:
#include <algorithm>
#include <algorithm>
